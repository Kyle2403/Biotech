set.seed(2024)
# Sample 500 IDs from each vector
sample_emp <- sample(emp_id, 500, replace = FALSE)
sample_astro <- sample(astro_id, 500, replace = FALSE)
sample_endo <- sample(endo_id, 500, replace = FALSE)
sample_mic <- sample(mic_id, 500, replace = FALSE)
sample_neuron <- sample(neuron_id, 500, replace = FALSE)
sample_oli <- sample(oli_id, 500, replace = FALSE)
# Combine all sampled IDs into a single vector
cells_subset <- c(sample_emp, sample_astro, sample_endo, sample_mic, sample_neuron, sample_oli)
#ncells_subset = 1000
#cells_subset = sample(ncells,ncells_subset)
for (i in cells_subset) {
# extract the boundary vertices for the selected cell
bounds_i = subset(cell_boundaries,cell_id == i)
# extract the cluster value for the selected cell
clustval_i = clusters %>% filter(Barcode == i) %>% select(Cluster) %>% as.character()
# extract the pixel intensities for the area covering the cell boundary
img_sub = img[min(bounds_i$vertex_x_trans):max(bounds_i$vertex_x_trans),
min(bounds_i$vertex_y_trans):max(bounds_i$vertex_y_trans)]
# normalise the pixel intensities according to 99th percentile
img_sub_norm = img_sub/quantile(img_sub, 0.99)
# if there is no folder for cell_images, create one
if (!file.exists("data/data_processed/cell_images_regrouped/")) {
dir.create("data/data_processed/cell_images_regrouped/", recursive = TRUE, showWarnings = FALSE)
}
# if there is no folder for the cluster, create one
clustval_i_directory = paste0("data/data_processed/cell_images_regrouped/",clustval_i)
if (!file.exists(clustval_i_directory)) {
dir.create(clustval_i_directory, recursive = TRUE, showWarnings = FALSE)
}
# save the extracted image as a png file
EBImage::writeImage(x = img_sub_norm,
files = paste0(clustval_i_directory, "/cell_", i, ".png"),
type = "png")
}
ncells_subset = 1000
cells_subset = sample(clusters$Barcode,ncells_subset)
cells_subset = sample(clusters$Barcode,ncells_subset)
cell_boundaries = read.csv("data/cell_boundaries.csv.gz")
cell_boundaries$vertex_x_trans = cell_boundaries$vertex_x/0.2125
cell_boundaries$vertex_y_trans = cell_boundaries$vertex_y/0.2125
clusters = read.csv("data/clusters.csv")
ncells = nrow(clusters)
for (i in 1:n_clusters){
lowest_ps = which(diff_exp[, i + 1] <= quantile(diff_exp[, i + 1], 0.00001))
max_fc_index = lowest_ps[which.max(diff_exp[lowest_ps, i + n_clusters + 1])]
label = diff_exp[max_fc_index, 2 * n_clusters + 2]
clusters <- clusters |> mutate(Cluster = ifelse(Cluster == i, label, Cluster))
}
library(tidyverse)
library(EBImage)
library(dplyr)
library(pracma)
library(png)
diff_exp = read.csv("data/differential_expression.csv")
n_clusters = ncol(diff_exp |> select(contains("Adjusted.p.value")))
diff_exp <- diff_exp |> select(contains(c("Feature.Name","Adjusted.p.value","fold")))
colnames(diff_exp)[1] <- "gene"
gene_groups = read.csv("data/Gene Groups.csv")
gene_groups <- gene_groups |> mutate(group = ifelse(group == "", "Emp", group))
diff_exp <- left_join(diff_exp, gene_groups, "gene")
diff_exp <- diff_exp |> replace_na(list(group = "Emp"))
cell_boundaries = read.csv("data/cell_boundaries.csv.gz")
cell_boundaries$vertex_x_trans = cell_boundaries$vertex_x/0.2125
cell_boundaries$vertex_y_trans = cell_boundaries$vertex_y/0.2125
clusters = read.csv("data/clusters.csv")
ncells = nrow(clusters)
for (i in 1:n_clusters){
lowest_ps = which(diff_exp[, i + 1] <= quantile(diff_exp[, i + 1], 0.00001))
max_fc_index = lowest_ps[which.max(diff_exp[lowest_ps, i + n_clusters + 1])]
label = diff_exp[max_fc_index, 2 * n_clusters + 2]
clusters <- clusters |> mutate(Cluster = ifelse(Cluster == i, label, Cluster))
}
emp_id = clusters %>% filter(Cluster == "Emp") %>% pull(Barcode)
astro_id = clusters %>% filter(Cluster == "Astrocytes") %>% pull(Barcode)
endo_id =  clusters %>% filter(Cluster == "Endothelial") %>% pull(Barcode)
mic_id = clusters %>% filter(Cluster == "Microglia") %>% pull(Barcode)
neuron_id = clusters %>% filter(Cluster == "Neurons") %>% pull(Barcode)
oli_id = clusters %>% filter(Cluster == "Oligodendrocytes") %>% pull(Barcode)
set.seed(2024)
# Sample 500 IDs from each vector
sample_emp <- sample(emp_id, 500, replace = FALSE)
sample_astro <- sample(astro_id, 500, replace = FALSE)
sample_endo <- sample(endo_id, 500, replace = FALSE)
sample_mic <- sample(mic_id, 500, replace = FALSE)
sample_neuron <- sample(neuron_id, 500, replace = FALSE)
sample_oli <- sample(oli_id, 500, replace = FALSE)
# Combine all sampled IDs into a single vector
cells_subset <- c(sample_emp, sample_astro, sample_endo, sample_mic, sample_neuron, sample_oli)
#ncells_subset = 1000
#cells_subset = sample(ncells,ncells_subset)
for (i in cells_subset) {
# extract the boundary vertices for the selected cell
bounds_i = subset(cell_boundaries,cell_id == i)
# extract the cluster value for the selected cell
clustval_i = clusters %>% filter(Barcode == i) %>% select(Cluster) %>% as.character()
# extract the pixel intensities for the area covering the cell boundary
img_sub = img[min(bounds_i$vertex_x_trans):max(bounds_i$vertex_x_trans),
min(bounds_i$vertex_y_trans):max(bounds_i$vertex_y_trans)]
# normalise the pixel intensities according to 99th percentile
img_sub_norm = img_sub/quantile(img_sub, 0.99)
# if there is no folder for cell_images, create one
if (!file.exists("data/data_processed/cell_images_regrouped/")) {
dir.create("data/data_processed/cell_images_regrouped/", recursive = TRUE, showWarnings = FALSE)
}
# if there is no folder for the cluster, create one
clustval_i_directory = paste0("data/data_processed/cell_images_regrouped/",clustval_i)
if (!file.exists(clustval_i_directory)) {
dir.create(clustval_i_directory, recursive = TRUE, showWarnings = FALSE)
}
# save the extracted image as a png file
EBImage::writeImage(x = img_sub_norm,
files = paste0(clustval_i_directory, "/cell_", i, ".png"),
type = "png")
}
ncells_subset = 1000
cells_subset = sample(clusters$Barcode,ncells_subset)
library(tidyverse)
library(EBImage)
library(dplyr)
library(pracma)
library(png)
get_inside = function(cellID, img, cell_boundaries) {
cell_boundary = cell_boundaries |>
filter(cell_id %in% cellID)
# rescale the boundary according to the pixels
pixels = dim(img)
cell_boundary$vertex_x_scaled <- 1+((cell_boundary$vertex_x - min(cell_boundary$vertex_x))/0.2125)
cell_boundary$vertex_y_scaled <- 1+((cell_boundary$vertex_y - min(cell_boundary$vertex_y))/0.2125)
# identify which pixels are inside or outside of the cell segment using inpolygon
pixel_locations = expand.grid(seq_len(nrow(img)), seq_len(ncol(img)))
pixels_inside = inpolygon(x = pixel_locations[,1],
y = pixel_locations[,2],
xp = cell_boundary$vertex_x_scaled,
yp = cell_boundary$vertex_y_scaled,
boundary = TRUE)
img_inside = img
img_inside@.Data <- matrix(pixels_inside, nrow = nrow(img), ncol = ncol(img))
return(img_inside)
}
mask_resize = function(img, img_inside, w = 50, h = 50) {
img_mask = img*img_inside
# then, transform the masked image to the same number of pixels, 50x50
img_mask_resized = resize(img_mask, w, h)
return(img_mask_resized)
}
save_as_png <- function(img, filename) {
png::writePNG(img, filename)
}
tifFile = "data/morphology_focus.tif"
if (!file.exists(tifFile)) {
options(java.parameters = "-Xmx10g")
library(RBioFormats)
checkJavaMemory()
img_ome = RBioFormats::read.image("../data_raw/morphology_focus.ome.tif",
read.metadata = FALSE,
normalize = TRUE)
img = img_ome[[1]]@.Data
EBImage::writeImage(x = img,
files = tifFile,
type = "tiff")
}
img = EBImage::readImage(tifFile)
diff_exp = read.csv("data/differential_expression.csv")
n_clusters = ncol(diff_exp |> select(contains("Adjusted.p.value")))
diff_exp <- diff_exp |> select(contains(c("Feature.Name","Adjusted.p.value","fold")))
colnames(diff_exp)[1] <- "gene"
gene_groups = read.csv("data/Gene Groups.csv")
gene_groups <- gene_groups |> mutate(group = ifelse(group == "", "Emp", group))
diff_exp <- left_join(diff_exp, gene_groups, "gene")
diff_exp <- diff_exp |> replace_na(list(group = "Emp"))
cell_boundaries = read.csv("data/cell_boundaries.csv.gz")
cell_boundaries$vertex_x_trans = cell_boundaries$vertex_x/0.2125
cell_boundaries$vertex_y_trans = cell_boundaries$vertex_y/0.2125
clusters = read.csv("data/clusters.csv")
ncells = nrow(clusters)
for (i in 1:n_clusters){
lowest_ps = which(diff_exp[, i + 1] <= quantile(diff_exp[, i + 1], 0.00001))
max_fc_index = lowest_ps[which.max(diff_exp[lowest_ps, i + n_clusters + 1])]
label = diff_exp[max_fc_index, 2 * n_clusters + 2]
clusters <- clusters |> mutate(Cluster = ifelse(Cluster == i, label, Cluster))
}
emp_id = clusters %>% filter(Cluster == "Emp") %>% pull(Barcode)
astro_id = clusters %>% filter(Cluster == "Astrocytes") %>% pull(Barcode)
endo_id =  clusters %>% filter(Cluster == "Endothelial") %>% pull(Barcode)
mic_id = clusters %>% filter(Cluster == "Microglia") %>% pull(Barcode)
neuron_id = clusters %>% filter(Cluster == "Neurons") %>% pull(Barcode)
oli_id = clusters %>% filter(Cluster == "Oligodendrocytes") %>% pull(Barcode)
set.seed(2024)
# Sample 500 IDs from each vector
sample_emp <- sample(emp_id, 500, replace = FALSE)
sample_astro <- sample(astro_id, 500, replace = FALSE)
sample_endo <- sample(endo_id, 500, replace = FALSE)
sample_mic <- sample(mic_id, 500, replace = FALSE)
sample_neuron <- sample(neuron_id, 500, replace = FALSE)
sample_oli <- sample(oli_id, 500, replace = FALSE)
# Combine all sampled IDs into a single vector
cells_subset <- c(sample_emp, sample_astro, sample_endo, sample_mic, sample_neuron, sample_oli)
#ncells_subset = 1000
#cells_subset = sample(ncells,ncells_subset)
for (i in cells_subset) {
# extract the boundary vertices for the selected cell
bounds_i = subset(cell_boundaries,cell_id == i)
# extract the cluster value for the selected cell
clustval_i = clusters %>% filter(Barcode == i) %>% select(Cluster) %>% as.character()
# extract the pixel intensities for the area covering the cell boundary
img_sub = img[min(bounds_i$vertex_x_trans):max(bounds_i$vertex_x_trans),
min(bounds_i$vertex_y_trans):max(bounds_i$vertex_y_trans)]
# normalise the pixel intensities according to 99th percentile
img_sub_norm = img_sub/quantile(img_sub, 0.99)
# if there is no folder for cell_images, create one
if (!file.exists("data/data_processed/cell_images_regrouped/")) {
dir.create("data/data_processed/cell_images_regrouped/", recursive = TRUE, showWarnings = FALSE)
}
# if there is no folder for the cluster, create one
clustval_i_directory = paste0("data/data_processed/cell_images_regrouped/",clustval_i)
if (!file.exists(clustval_i_directory)) {
dir.create(clustval_i_directory, recursive = TRUE, showWarnings = FALSE)
}
# save the extracted image as a png file
EBImage::writeImage(x = img_sub_norm,
files = paste0(clustval_i_directory, "/cell_", i, ".png"),
type = "png")
}
ncells_subset = 1000
cells_subset = sample(clusters$Barcode,ncells_subset)
gc()
shiny::runApp('Documents/2024/DATA3888/Imaging_Project/IMAGING/demo2')
install.packages("mathjaxr")
runApp('Documents/2024/DATA3888/Imaging_Project/IMAGING/demo2')
cluster_A_files = list.files("data/Biotechnology/data_processed/cell_images/cluster_8/",
full.names = TRUE)
cluster_B_files = list.files("data/Biotechnology/data_processed/cell_images/cluster_13/",
full.names = TRUE)
library(tidyverse)
library(EBImage)
library(dplyr)
library(pracma)
library(png)
library(tidyverse)
library(EBImage)
library(dplyr)
library(pracma)
library(png)
astrocyte_files <- list.files("data/data_processed/cells_renamed_imbalanced/Astrocytes/", full.names = TRUE)
empty_files <- list.files("data/data_processed/cells_renamed_imbalanced/Emp/", full.names = TRUE)
endothelial_files <- list.files("data/data_processed/cells_renamed_imbalanced/Endothelial/", full.names = TRUE)
microglia_files <- list.files("data/data_processed/cells_renamed_imbalanced/Microglia/", full.names = TRUE)
neurons_files <- list.files("data/data_processed/cells_renamed_imbalanced/Neurons/", full.names = TRUE)
oligodendrocyte_files <- list.files("data/data_processed/cells_renamed_imbalanced/Oligodendrocytes/", full.names = TRUE)
astro_cell_ids = gsub(".*cell_|.png", "", astrocyte_files)
cluster_A_cell_ids = gsub(".*cell_|.png", "", cluster_A_files)
astro_cell_ids
astro_cell_ids = gsub(".*/|.png", "", astrocyte_files)
astro_cell_ids
astro_cell_ids = gsub(".*/|.png", "", astrocyte_files)
empty_cell_ids = gsub(".*/|.png", "", empty_files)
enod_cell_ids = gsub(".*/|.png", "", endothelial_files)
micro_cell_ids = gsub(".*/|.png", "", microglia_files)
neurons_cell_ids = gsub(".*/|.png", "", neurons_files)
oligo_cell_ids = gsub(".*/|.png", "", oligodendrocyte_files)
astrocyte_files <- list.files("data/data_processed/cells_renamed_imbalanced/Astrocytes/", full.names = TRUE)
empty_files <- list.files("data/data_processed/cells_renamed_imbalanced/Emp/", full.names = TRUE)
endothelial_files <- list.files("data/data_processed/cells_renamed_imbalanced/Endothelial/", full.names = TRUE)
microglia_files <- list.files("data/data_processed/cells_renamed_imbalanced/Microglia/", full.names = TRUE)
neurons_files <- list.files("data/data_processed/cells_renamed_imbalanced/Neurons/", full.names = TRUE)
oligodendrocyte_files <- list.files("data/data_processed/cells_renamed_imbalanced/Oligodendrocytes/", full.names = TRUE)
astro_cell_ids = gsub(".*/|.png", "", astrocyte_files)
empty_cell_ids = gsub(".*/|.png", "", empty_files)
enod_cell_ids = gsub(".*/|.png", "", endothelial_files)
micro_cell_ids = gsub(".*/|.png", "", microglia_files)
neurons_cell_ids = gsub(".*/|.png", "", neurons_files)
oligo_cell_ids = gsub(".*/|.png", "", oligodendrocyte_files)
n(astro_cell_ids)
length(astro_cell_ids)
rbind(astro_cell_ids, rep("Astrocytes", length(astro_cell_ids)))
astro_cell_ids = gsub(".*/|.png", "", astrocyte_files)
empty_cell_ids = gsub(".*/|.png", "", empty_files)
endo_cell_ids = gsub(".*/|.png", "", endothelial_files)
micro_cell_ids = gsub(".*/|.png", "", microglia_files)
neurons_cell_ids = gsub(".*/|.png", "", neurons_files)
oligo_cell_ids = gsub(".*/|.png", "", oligodendrocyte_files)
combined <- rbind(astro_cell_ids, empty_cell_ids, endo_cell_ids, micro_cell_ids, neurons_cell_ids, oligo_cell_ids)
View(combined)
combined <- cbind(astro_cell_ids, empty_cell_ids, endo_cell_ids, micro_cell_ids, neurons_cell_ids, oligo_cell_ids)
View(combined)
View(combined)
combined <-c(astro_cell_ids, empty_cell_ids, endo_cell_ids, micro_cell_ids, neurons_cell_ids, oligo_cell_ids)
library(tidyverse)
library(EBImage)
library(dplyr)
library(pracma)
library(png)
astrocyte_files <- list.files("data/data_processed/cells_renamed_imbalanced/Astrocytes/", full.names = TRUE)
empty_files <- list.files("data/data_processed/cells_renamed_imbalanced/Emp/", full.names = TRUE)
endothelial_files <- list.files("data/data_processed/cells_renamed_imbalanced/Endothelial/", full.names = TRUE)
microglia_files <- list.files("data/data_processed/cells_renamed_imbalanced/Microglia/", full.names = TRUE)
neuron_files <- list.files("data/data_processed/cells_renamed_imbalanced/Neurons/", full.names = TRUE)
oligodendrocyte_files <- list.files("data/data_processed/cells_renamed_imbalanced/Oligodendrocytes/", full.names = TRUE)
astro_cell_ids = gsub(".*/|.png", "", astrocyte_files)
empty_cell_ids = gsub(".*/|.png", "", empty_files)
endo_cell_ids = gsub(".*/|.png", "", endothelial_files)
micro_cell_ids = gsub(".*/|.png", "", microglia_files)
neuron_cell_ids = gsub(".*/|.png", "", neurons_files)
astro_cell_ids = gsub(".*/|.png", "", astrocyte_files)
empty_cell_ids = gsub(".*/|.png", "", empty_files)
endo_cell_ids = gsub(".*/|.png", "", endothelial_files)
micro_cell_ids = gsub(".*/|.png", "", microglia_files)
neuron_cell_ids = gsub(".*/|.png", "", neuron_files)
oligo_cell_ids = gsub(".*/|.png", "", oligodendrocyte_files)
combined <-cbind(c(astro_cell_ids, empty_cell_ids, endo_cell_ids,
micro_cell_ids,neuron_cell_ids,oligo_cell_ids),
c(rep("Astrocyte",length(astro_cell_ids)),
rep("Empty",length(empty_cell_ids)),
rep("Microglia",length(micro_cell_ids)),
rep("Neuron",length(neuron_cell_ids)),
rep("Oligodendrocyte",length(oligo_cell_ids))
))
View(combined)
View(combined)
combined <-cbind(c(astro_cell_ids, empty_cell_ids, endo_cell_ids,
micro_cell_ids,neuron_cell_ids,oligo_cell_ids),
c(rep("Astrocyte",length(astro_cell_ids)),
rep("Empty",length(empty_cell_ids)),
rep("Endothelial",length(endo_cell_ids)),
rep("Microglia",length(micro_cell_ids)),
rep("Neuron",length(neuron_cell_ids)),
rep("Oligodendrocyte",length(oligo_cell_ids))
))
View(combined)
View(combined)
colnames(combined)
col(combined)
cols(combined)
colnames(combined)
colnames(combined) <- c("Cell_id", "Group")
combined |> ggplot(aes(x = "Group"))
combined$Group
combined$"Group"
View(combined)
View(combined)
combined <-tibble(cell_id = c(astro_cell_ids, empty_cell_ids, endo_cell_ids,
micro_cell_ids,neuron_cell_ids,oligo_cell_ids),
group = c(rep("Astrocyte",length(astro_cell_ids)),
rep("Empty",length(empty_cell_ids)),
rep("Endothelial",length(endo_cell_ids)),
rep("Microglia",length(micro_cell_ids)),
rep("Neuron",length(neuron_cell_ids)),
rep("Oligodendrocyte",length(oligo_cell_ids))
))
View(combined)
combined |> ggplot(aes(x = group))
combined |> ggplot(aes(x = group)) +
geom_histogram()
summary(combined)
combined |> mutate(group = factor(group))
combined <- combined |> mutate(group = factor(group))
combined |> ggplot(aes(x = group)) +
geom_histogram()
combined |> count()
combined |> count(group)
combined |> count(group) |> ggplot(aes(x = group)) +
geom_histogram()
combined |> count(group) |> ggplot(aes(x = n)) +
geom_histogram()
combined |> count(group) |> ggplot(aes(x = group, y = n)) +
geom_histogram()
combined |> ggplot(aes(x = group)) +
geom_histogram()
combined |> ggplot(aes(x = group)) +
geom_histogram(stat ="count")
combined |> ggplot(aes(x = group)) +
geom_histogram(stat ="count") +
scale_fill_brewer(palette = "Set2")
combined |> ggplot(aes(x = group)) +
geom_histogram(stat ="count") +
scale_fill_brewer(palette = "Set2")
combined |> ggplot(aes(x = group)) +
geom_histogram(stat ="count") +
scale_fill_brewer(palette = "Set1")
combined |> ggplot(aes(x = group)) +
geom_histogram(stat ="count") +
scale_color_brewer(palette = "Set1")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_color_brewer(palette = "Set1")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_color_brewer(palette = "Set2")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_color_brewer(palette = "set2")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_color_viridis()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_color_viridis_d()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_brewer(palette = "Set1")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_brewer(palette = "Set2")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d(palette = "Set2")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_bw()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_classic()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labels()
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labels(legend = "Group")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
lab(legend = "Group")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(legend = "Group")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labels(legend = "Group")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(legend = "Group")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(fill = "Group")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(fill = "Group", xlab = NULL)
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(fill = "Group", xlab = "")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(fill = "Group", x= "")
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(fill = "Group", x = NULL)
combined |> ggplot(aes(x = group, fill = group)) +
geom_histogram(stat ="count") +
scale_fill_viridis_d() +
theme_minimal() +
labs(fill = "Group", x = NULL,
y = "Count")
shiny::runApp('Documents/2024/DATA3888/group8_data3888/shiny_app')
runApp('Documents/2024/DATA3888/group8_data3888/shiny_app')
getwd()
setwd("Documents/2024/DATA3888/group8_data3888/")
setwd("shiny_app/")
runApp()
runApp()
install.packages("torchvision")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
